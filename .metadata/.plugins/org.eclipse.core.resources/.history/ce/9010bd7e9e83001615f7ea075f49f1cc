/*
ID: karthik71
LANG: JAVA
TASK: barn1
*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

class gap implements Comparable<gap>{

	int start;
	int end;

	gap(int start,int end)
	{
		this.start = start;
		this.end = end;
	}


	@Override
	public String toString() {
		return "board [start=" + start + ", end=" + end + "]";
	}


	@Override
	public int compareTo(gap arg0) {
		
		if((arg0.end-arg0.end-1)<(this.end-this.start-1))
		{
			return 1;
		}
		else if((arg0.end-arg0.end-1)>(this.end-this.start-1))
		{
			return -1;
		}

		return 0;
		
	}


}

public class barn1 {

	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new FileReader("barn1.in"));

		PrintWriter out = new PrintWriter(new FileWriter("barn1.out"));
/*
		BufferedReader br = new BufferedReader(new FileReader("D:/USACO_Learnings/Section1.3/IO/barn1/barn1.in"));

		PrintWriter out = new PrintWriter(new FileWriter("D:/USACO_Learnings/Section1.3/IO/barn1/barn1.out"));*/

		String[] input = br.readLine().split(" ");

		int maxTables = Integer.parseInt(input[0]);
		int totalStalls = Integer.parseInt(input[1]);
		int cowStalls = Integer.parseInt(input[2]);



		int stallsBlocked = cowStalls;

		if(maxTables<cowStalls)
		{
			int[] stalls=new int[cowStalls];
			
			for(int i=0;i<cowStalls;i++)
			{
				stalls[i]=Integer.parseInt(br.readLine());
			}
			
			Arrays.sort(stalls); //Received input and sorted

			ArrayList<gap> objs = new ArrayList<gap>();

			int prev = stalls[0];

			for(int i=1;i<cowStalls;i++)
			{
				int current = stalls[i];

				if(prev+1!=current)
				{
					objs.add(new gap(prev,current));
				}

				prev=current;
			}
			
			Collections.sort(objs); //gaps calculated and sorted


			for(int i=1;i<maxTables;i++)
			{
				gap loc = objs.remove(0);

				stallsBlocked+=(loc.end-loc.start-1);
			}

		}
		
		out.println(stallsBlocked);

		br.close();
		out.close();


	}

}
